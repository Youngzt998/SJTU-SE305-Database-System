-- MySQL Script generated by MySQL Workbench
-- Tue Dec 10 00:47:47 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db517021910683` DEFAULT CHARACTER SET utf8 ;
USE `db517021910683` ;

-- -----------------------------------------------------
-- Table `mydb`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`customer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`customer` (
  `id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(30) NULL,
  `code` VARCHAR(30) NULL,
  `gender` TINYINT NULL,
  `address` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;




-- -----------------------------------------------------
-- Table `mydb`.`orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`orders` ;

CREATE TABLE IF NOT EXISTS `mydb`.`orders` (
  `id` INT UNSIGNED NOT NULL,
  `number` CHAR(16) NULL,
  `price` DOUBLE UNSIGNED NULL,
  `time` DATETIME NULL,
  `cart_id` INT UNSIGNED NOT NULL,
  `cart_customer_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`, `cart_id`, `cart_customer_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`order_details`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`order_details` ;

CREATE TABLE IF NOT EXISTS `mydb`.`order_details` (
  `number` INT UNSIGNED NULL,
  `price` DOUBLE UNSIGNED NULL,
  `order_id` INT UNSIGNED NOT NULL,
  `order_cart_id` INT UNSIGNED NOT NULL,
  `order_cart_customer_id` INT UNSIGNED NOT NULL,
  `goods_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`order_id`, `order_cart_id`, `order_cart_customer_id`, `goods_id`))
ENGINE = InnoDB;



USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`customer_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`customer_BEFORE_INSERT` AFTER INSERT ON `customer` FOR EACH ROW
BEGIN

declare i int;
declare msg varchar(200);
set i = 0;
if binary new.code regexp '[A-Z]'
then	set i = i + 1;
end if;

if binary new.code regexp binary'[a-z]'
then	set i = i + 1;
end if;

if binary new.code regexp '[0-9]'
then	set i = i + 1;
end if;

if i <3 then
	set msg = "password not valid";
	SIGNAL SQLSTATE '45001' SET message_text=msg;
end if;

END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`order_details_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`order_details_AFTER_INSERT` AFTER INSERT ON `order_details` FOR EACH ROW
BEGIN
-- if new.`number`< (select remain from goods where id = new.goods_id) then
-- set new.goods_id = null;
-- else 
update cart set total_price = total_price - new.price * new.`number` where (id, customer_id) = (new.order_cart_id, new.order_cart_customer_id);
update cart_details set `number` = `number` - new.`number` where (cart_id, cart_customer_id, goods_id) = (new.order_cart_id, new.order_cart_customer_id, new.goods_id);

if 0 = (select `number` from cart_details where (cart_id, cart_customer_id, goods_id) = (new.order_cart_id, new.order_cart_customer_id, new.goods_id))
then 
delete from cart_details where(cart_id, cart_customer_id, goods_id) = (new.order_cart_id, new.order_cart_customer_id, new.goods_id);
end if;

update orders set price = price + new.price * new.`number` where (id, cart_id, cart_customer_id) = (new.order_id, new.order_cart_id, new.order_cart_customer_id);
update goods set remain = remain - new.`number` where id = new.goods_id;
-- end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`order_details_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`order_details_BEFORE_INSERT` BEFORE INSERT ON `order_details` FOR EACH ROW
BEGIN
if new.`number`> (select remain from goods where id = new.goods_id) then
set new.goods_id = null;
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`cart_details_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`cart_details_AFTER_INSERT` AFTER INSERT ON `cart_details` FOR EACH ROW
BEGIN
update cart set total_price = total_price + new.price*new.`number` where (id, customer_id) = (new.cart_id, new.cart_customer_id);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
